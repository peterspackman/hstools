#!/usr/bin/python
"""
Usage:
    sarlacc [options] <command> [<args>...]

options:
    -h, --help          Show this help message and exit.

    --version           Print the program version and exit.

    -s, --silent        Do not print output to stdout/stderr

    -n=N, --procs=N     The number of processors to use.
                        This option will use 2n threads. [default: 4]

The available commands are:

    hist                Process files by constructing Hirshfeld fingerprints
                        i.e. histograms of distances on the surface.
    harmonics           Process files by spherical harmonic invariants.
    surface             Calclute statistics associated with values on the
                        Hirshfeld surface.
    clusters            Calculate clusters and compare their contents for
                        the various methods in harmonics and metrics.
    corr                Correlation between ...
    poly                Read data from a HDF5 file and write the Hirshfeld
                        surface out as a .ply file

Sarlacc

This program deals primarily with properties of the Hirshfeld surfaces
of various molecular crystals generated by tonto.

The program can:

    Perform clustering on the generated fingerprints (using hist or harmonics
    called with a directory as the argument)

    Generate and output the percentage contribution to hirshfeld surface from
    various elements. (using surface command)
"""

# system
import logging
import sys

# Library imports
from docopt import docopt

# Local imports
from .data import Timer, logger, log

program_name = "sarlacc"
version = "2015.02.24"

args = docopt(__doc__, version=version,
              options_first=True)

available_commands = ['harmonics', 'hist',
                      'surface', 'clusters',
                      'corr', 'poly']


def main():
    argv = [args['<command>']] + args['<args>']
    procs = int(args['--procs'])

    with Timer() as t:
        # If silent only print WARNINGS
        if args['--silent']:
            logger.setLevel(logging.WARNING)

        command = args['<command>']

        if command == 'harmonics':
            from .harmonics import harmonics_main
            harmonics_main(argv, procs=procs)

        elif command == 'hist':
            from .hist import hist_main
            hist_main(argv, procs=procs)

        elif command == 'surface':
            from .surface import surface_main
            surface_main(argv, procs=procs)

        elif command == 'clusters':
            from .clusters import clusters_main
            clusters_main(argv, procs=procs)

        elif command == 'corr':
            from .corr import corr_main
            corr_main(argv)

        elif command == 'poly':
            from .ply import ply_main
            ply_main(argv)

        else:
            """ Not really necessary, but provided fuzzing
                to give hints to user about available commands
                when used """

            from fuzzywuzzy import process
            logger.error('{} is not a valid command.'
                              '\nSee {} --help for more.'.format(command,
                                                                 program_name))
            x = process.extract(command,
                                available_commands,
                                limit=1)
            closest, ratio = x[0]
            if(ratio > 60):
                log('did you mean?\n\t{}'.format(closest))
            sys.exit(2)

    log('Program complete in {:.2}s.'.format(t.elapsed()))
    sys.exit(0)

if __name__ == '__main__':
    main()
