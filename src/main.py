#!/usr/bin/python
"""
Usage:
    sarlacc [--help] [--silent] [--version] <command> [<args>...]

options:
    -h, --help          Show this help message and exit.
    --version           Print the program version and exit.
    -s, --silent        Do not print output to stdout/stderr

The available commands are:

    hist                Process files by constructing Hirshfeld fingerprints
                        i.e. histograms of distances on the surface.
    harmonics           Process files by spherical harmonic invariants.
    surface             Calclute statistics associated with values on the
                        Hirshfeld surface.

(--batch <dir> | <file>) [options]

    sarlacc surface (--batch <dir> | <file>) [options]
    sarlacc harmonics (--batch <dir> | <file>) [options]

Simple And ReuseabLe Algorithms for Computational Chemistry (Sarlacc)

This program deals primarily with the histograms or 'fingerprints' generated
from the hirshfeld surfaces of various molecular crystals generated by tonto.

In addition this program can:

* Perform clustering on the generated fingerprints (using hist with --batch)
* Generate and output the percentage contribution to hirshfeld surface from
various elements. (using surface command)

Options:

    -n=N, --procs=N                The number of processes to parse
                                   files with. [default: 4]
"""
# system
import logging
# Library imports
from docopt import docopt
# Local imports
from . import data
from . import modes

version = "0.86"
args = docopt(__doc__, version=version,
              options_first=True)

available_commands = ['harmonics', 'hist', 'surface']


def main():
    argv = [args['<command>']] + args['<args>']
    with data.Timer() as t:
        if args['--silent']:
            data.logger.setLevel(logging.WARNING)

        command = args['<command>']

        if command == 'harmonics':
            from . import harmonics
            harmonics.harmonics_main(argv)

        elif command == 'hist':
            from . import hist
            hist.hist_main(argv)

        elif command == 'surface':
            from . import surface
            surface.surface_main(argv)

        else:
            from fuzzywuzzy import process
            print('Unknown command -- {}'.format(command))
            x = process.extract(command,
                                available_commands,
                                limit=1)
            closest, ratio = x[0]
            if(ratio > 60):
                print('Perhaps you meant -- {}?'.format(closest))

    data.log('Program complete in {:.2}s.'.format(t.elapsed()))


if __name__ == '__main__':
    main()
