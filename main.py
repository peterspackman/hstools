#!/usr/bin/python
# Core imports
import sys
import argparse
import os
# local imports
import hist
import calc
import fileio as fio

test_f = {'sp':calc.spearman_roc,'kt':calc.kendall_tau}
test_names = {'sp':'Spearman rank order coefficient',
              'kt':'Kendall Tau',
              'hd':'Hausdorff distance'}


##########        MAIN PROGRAM           ###########


def main():
  """
  This program currently rounds distance matrices to 5 d.p. 
  due to floating point arithmetic problems!!'
  """

  # Construct and deal with command line arguments
  parser = argparse.ArgumentParser(description= \
      'A command-line program to calculate the histograms of hirshfeld surfaces \
       generated by tonto. In addition this program can perform clustering on the \
       output surfaces, using various statistical tests')
 
  parser.add_argument('-f','--file',metavar='FILENAME', 
                      help='Generate a histogram for a single file named FILENAME.')
  parser.add_argument('-b','--bins',metavar='NBINS', type=int, default=10,
                      help='set the number of bins to use in the histogram')
  parser.add_argument('-d','--dir',metavar='DIRNAME',
                      help='Process all cxs files in DIRNAME.')
  parser.add_argument('-t','--test',default='sp',
                      help='Select which test to use for batch processing. \
                      Valid options are: sp, kt, hd')
  parser.add_argument('-p','--png',action='store_true',
                      help='Plot histograms calculated and save them  \
                            to file while processing')

  opts = parser.parse_args()
  # Variables for which test we are doing (and its string name)
  mtest = test_f[opts.test]
  tname =  test_names[opts.test]

  if opts.dir:
    
    # Program is being run to batch process a directory of cxs files

    histograms,names = fio.batch_process(opts.dir, resolution=opts.bins,write_png=opts.png)
    print 'Generating matrix using {0}'.format(tname)
    mat = calc.get_correl_mat(histograms,test=mtest)
    calc.cluster(mat,names,tname)
    sys.exit(0)
  
  if opts.file:
    
    # Program is being run to simply generate a histogram from one cxs file
    # Provides no real result unless -p flag is invoked
    
    print 'Generating histogram from {1}'.format(tname,opts.file)
    hist,name = fio.process_file(opts.file, resolution=opts.bins,write_png=opts.png)
    sys.exit(0)

  # If we got here, the program wasn't called correctly

  parser.print_help()

# Python's way of dealing with main
if __name__ == '__main__':
  main()

