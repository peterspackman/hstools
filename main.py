#!/usr/bin/python
# Core imports
import sys
import argparse
import time
import os
# local imports
import hist
import calc
import fileio as fio
import visual
from collections import Counter

version = "0.1"
progname = "sherlock"
test_f = {'sp': calc.spearman_roc, 'kt': calc.kendall_tau}
test_names = {'sp': 'Spearman rank order coefficient',
              'kt': 'Kendall Tau',
              'hd': 'Hausdorff distance'}


# *******        MAIN PROGRAM           ****** #


def main():
    """
    This program currently rounds distance matrices to 5 d.p.
    due to floating point arithmetic problems!!'
    """

    # Construct and deal with command line arguments
    parser = argparse.ArgumentParser(description="""
         This program deals primarily with the histograms or 'fingerprints'
         generated from the hirshfeld surfaces of various molecular crystals
         generated by tonto.In addition this program can:
         perform clustering on the generated fingerprints using various
         statistical tests, generate and output the percentage contribution
         to the surface of various elements.
         """, prog=progname)

    parser.add_argument('-v', '--version', action='version',
                        version='%(prog)s {0}'.format(version))

    parser.add_argument('-f', '--file', metavar='FILENAME',
                        help="""generate information about percentage
                        contribution to the hirshfeld surface contained
                        in FILENAME.""")
    parser.add_argument('-b', '--bins', metavar='NBINS', type=int, default=10,
                        help='set the number of bins to use in the histogram')
    parser.add_argument('-d', '--dir', metavar='DIRNAME',
                        help='Process all cxs files in DIRNAME.')
    parser.add_argument('-t', '--test', default='sp',
                        help='Select which test to use for batch processing. \
                        Valid options are: sp, kt, hd')
    parser.add_argument('-p', '--png', action='store_true',
                        help='Plot histograms calculated and save them  \
                              to file while processing')
    parser.add_argument('-n', '--threads', metavar='N',
                        help='The number of threads/processes to use when \
                        file processing. By default, 4 will be used',
                        type=int, default=4)
    opts = parser.parse_args()
    # Variables for which test we are doing (and its string name)
    mtest = test_f[opts.test]
    tname = test_names[opts.test]

    # END OF ARGUMENT PROCESSING

    if opts.dir:

        # Program is being run to batch process a directory of cxs files
        start_time = time.time()
        histograms, names = fio.batch_process(opts.dir, resolution=opts.bins,
                                              write_png=opts.png,
                                              threads=opts.threads)

        print 'Generating matrix using {0}'.format(tname)
        mat = calc.get_correl_mat(histograms, test=mtest)
        calc.cluster(mat, names, tname)
        print 'Process complete: {0} s'.format(time.time() - start_time)
        sys.exit(0)

    if opts.file:
        if not opts.file.endswith('.cxs'):
            print 'Not called with a .cxs file, odds are this is a problem!'
        # Generate the percentage contribution of each element in the surface
        # Provides no real result unless -p flag is invoked

        print 'Processing input from {0}'.format(opts.file)
        x, y, a = fio.readcxsfile(opts.file)

        formula, atoms, de_face_atoms, di_face_atoms = a

        contrib, contrib_p = calc.get_contrib_percentage(atoms,
                                                         de_face_atoms,
                                                         di_face_atoms)
        print 'Molecular Formula: {0}'.format(formula)
        print contrib_p
        sys.exit(0)

    # If we got here, the program wasn't called correctly

    parser.print_help()

# Python's way of dealing with main
if __name__ == '__main__':
    main()
