#!/usr/bin/python
"""Usage:
    sclcc hist (--batch <dir> | <file>) [options]
    sclcc surface (--batch <dir> | <file>) [options]
    sclcc (--version | --help | -h)

Simple Command-Line Computational Chemistry (SCLCC)

This program deals primarily with the histograms or 'fingerprints' generated
from the hirshfeld surfaces of various molecular crystals generated by tonto.

In addition this program can:

* Perform clustering on the generated fingerprints (using hist with --batch)
* Generate and output the percentage contribution to hirshfeld surface from
various elements. (using surface command)

Options:
    -h, --help                     Show this help message and exit.
    --version                      Show program's version number and exit.
    -b=NUM, --bins=NUM             Set the number of bins to use
                                   in the histogram. [default: 100]
    -t=TEST, --test=TEST           Select which test will be used.
                                   [default: sp]
    -p, --save-figures             Plot histograms calculated and
                                   save them to file.
    -n=N, --procs=N                The number of processes to parse
                                   files with. [default: 4]
    -i=ATOM, --internal-atom=ATOM  Restrict the closest internal atom
                                   in the histogram
    -e=ATOM, --external-atom=ATOM  Restrict the closest external atom
                                   in the histogram
    -j=FILE, --json=FILE           Dump the dendrogram tree to JSON

    --no-restrict                  Don't restrict the surface area
                                   values to only those closer than
                                   Van Der Waal's Radii
    --order-important              When classifying surface area,
                                   indicate that H -> O is different
                                   to O -> H. (i.e. order is important)
    --write-file=FILE              Write the surface area info to file
"""

# Core imports
import sys
import time
# Library imports
from docopt import docopt
# Local imports
import calc
import fileio as fio

version = "0.26"
test_f = {'sp': calc.spearman_roc,
          'kt': calc.kendall_tau,
          'hd': calc.hdistance}
test_names = {'sp': 'Spearman rank order coefficient',
              'kt': 'Kendall Tau',
              'hd': 'Custom histogram distance'}
args = docopt(__doc__, version=version)

# *******        MAIN PROGRAM           ****** #


def main():
    """
    This program currently rounds distance matrices to 5 d.p.
    due to floating point arithmetic problems!!'
    """
    mtest = test_f[args['--test']]
    tname = test_names[args['--test']]
    start_time = time.time()
    procs = int(args['--procs'])
    # Process histograms
    if args['hist']:
        bins = int(args['--bins'])
        png = args['--save-figures']

        if args['<file>']:
            fname = args['<file>']
            if not png:
                print 'Not saving figure, so this command will have no output'
            h, name = fio.proc_file_hist(fname, resolution=bins,
                                         save_figs=png)

        elif args['<dir>']:
            dirname = args['<dir>']
            # Program is being run to batch process a directory of cxs files
            histograms, names = fio.batch_hist(dirname, resolution=bins,
                                               save_figs=png,
                                               procs=procs)

            print 'Generating matrix using {0}'.format(tname)
            mat = calc.get_dist_mat(histograms, test=mtest)
            calc.cluster(mat, names, tname, dump=args['--json'])

    # Process surface area statistics
    if args['surface']:
        restrict = not args['--no-restrict']
        order = args['--order-important']
        if args['<file>']:
            fname = args['<file>']
            if not fname.endswith('.cxs'):
                print 'WARNING: {0} does not have .cxs extension'.format(fname)
            # Generate the percentage contribution of each element
            formula, contrib_p = fio.proc_file_sa(fname, restrict, order=order)
            print 'Molecular Formula: {0}'.format(formula)

            for key in sorted(contrib_p, key=lambda key: contrib_p[key]):
                print '{0} contribution: {1} %'.format(key, contrib_p[key])

        elif args['<dir>']:
            dirname = args['<dir>']
            formulae, contribs = fio.batch_surface(dirname, restrict,
                                                   procs=procs, order=order)
            if restrict:
                print "Restricted interactions using CCDC Van Der Waal's Radii"
            # If we are writing to file
            if args['--write-file']:
                fname = args['--write-file']
                fio.write_sa_file(fname, formulae, contribs)
            # Otherwise we are printing to stdout
            else:
                for i in range(len(formulae)):
                    formula = formulae[i]
                    contrib_p = contribs[i]
                    print 'Molecular Formula: {0}'.format(formula)
                    if not contrib_p:
                        print '-- Nil--'
                    for key in sorted(contrib_p, key=lambda key: contrib_p[key]):
                        print '{0} contribution: {1} %'.format(key, contrib_p[key])

    # If we got here, program was success!
    print 'Process complete! Took {0:.2} s'.format(time.time() - start_time)
    sys.exit(0)


if __name__ == '__main__':
    main()
